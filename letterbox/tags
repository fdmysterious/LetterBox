!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
COMMUNICATION_SERIAL_BAUD_RATE	communication.h	27;"	d
COMMUNICATION_SERIAL_BAUD_RATE	config.h	62;"	d
DETECTION_INFRARED_THRESOLD	config.h	25;"	d
DETECTION_INFRARED_THRESOLD	detect.h	42;"	d
DETECTION_INFRARED_TIME	config.h	18;"	d
DETECTION_INFRARED_TIME	detect.h	32;"	d
HEADER_COMMUNICATION	communication.h	10;"	d
HEADER_CONFIG	config.h	9;"	d
HEADER_DETECT	detect.h	14;"	d
HEADER_PINS	pins.h	9;"	d
HEADER_SLEEP	sleep.h	9;"	d
SLEEP_LOG_ENABLE	config.h	53;"	d
SLEEP_MODE	config.h	46;"	d
SLEEP_MODE	sleep.h	37;"	d
begin	communication.cpp	/^		Serial.begin(COMMUNICATION_SERIAL_BAUD_RATE);$/;"	p	file:
communication	communication.cpp	/^namespace communication$/;"	n	file:
communication	communication.h	/^namespace communication$/;"	n
communication::begin	communication.cpp	/^		Serial.begin(COMMUNICATION_SERIAL_BAUD_RATE);$/;"	p	file:
communication::setup	communication.cpp	/^	void setup()$/;"	f	namespace:communication
communication::setup	communication.h	/^	void setup(); \/\/Permet de configurer la communication.$/;"	p	namespace:communication
communication::setup	letterbox.cpp	/^	communication::setup();$/;"	p	class:communication	file:
detect	detect.cpp	/^uint8_t detect()$/;"	f
detect	detect.h	/^uint8_t detect(); \/\/Permet de dÈtecter si il y a eu un ÈvÈnement$/;"	p
door	pins.h	/^	const uint8_t door = 3;$/;"	m	namespace:pin
flush	sleep.cpp	/^		Serial.flush(); \/\/On affiche imm√©diatement ; pas question de laisser le message tra√Æner dans le buffer :p$/;"	p	file:
flush	sleep.cpp	/^		Serial.flush();$/;"	p	file:
interrupt	pins.h	/^	const uint8_t interrupt = 2;$/;"	m	namespace:pin
loop	letterbox.cpp	/^void loop()$/;"	f
messages	sleep.h	/^	const String messages[2] = $/;"	m	namespace:sleep
now	letterbox.cpp	/^	sleep::now();$/;"	p	class:sleep	file:
now	sleep.cpp	/^	void now()$/;"	f	namespace:sleep
now	sleep.h	/^	void now();$/;"	p	namespace:sleep
pin	pins.h	/^namespace pin$/;"	n
pin::door	pins.h	/^	const uint8_t door = 3;$/;"	m	namespace:pin
pin::interrupt	pins.h	/^	const uint8_t interrupt = 2;$/;"	m	namespace:pin
pin::setup	letterbox.cpp	/^	pin::setup();$/;"	p	class:pin	file:
pin::setup	pins.h	/^	void setup() \/\/Permet d'initialiser les modes des pins$/;"	f	namespace:pin
pin::trapdoor	pins.h	/^	const uint8_t trapdoor = 4;$/;"	m	namespace:pin
println	letterbox.cpp	/^		Serial.println(result);$/;"	p	file:
println	sleep.cpp	/^		Serial.println(messages[0]);$/;"	p	file:
println	sleep.cpp	/^		Serial.println(messages[1]);$/;"	p	file:
result	letterbox.cpp	/^	uint8_t result = detect();$/;"	l
setup	communication.cpp	/^	void setup()$/;"	f	namespace:communication
setup	communication.h	/^	void setup(); \/\/Permet de configurer la communication.$/;"	p	namespace:communication
setup	letterbox.cpp	/^	communication::setup();$/;"	p	class:communication	file:
setup	letterbox.cpp	/^	pin::setup();$/;"	p	class:pin	file:
setup	letterbox.cpp	/^	sleep::setup();$/;"	p	class:sleep	file:
setup	letterbox.cpp	/^void setup()$/;"	f
setup	pins.h	/^	void setup() \/\/Permet d'initialiser les modes des pins$/;"	f	namespace:pin
setup	sleep.cpp	/^	void setup()$/;"	f	namespace:sleep
setup	sleep.h	/^	void setup();$/;"	p	namespace:sleep
sleep	sleep.cpp	/^namespace sleep$/;"	n	file:
sleep	sleep.h	/^namespace sleep$/;"	n
sleep::flush	sleep.cpp	/^		Serial.flush(); \/\/On affiche imm√©diatement ; pas question de laisser le message tra√Æner dans le buffer :p$/;"	p	file:
sleep::flush	sleep.cpp	/^		Serial.flush();$/;"	p	file:
sleep::messages	sleep.h	/^	const String messages[2] = $/;"	m	namespace:sleep
sleep::now	letterbox.cpp	/^	sleep::now();$/;"	p	class:sleep	file:
sleep::now	sleep.cpp	/^	void now()$/;"	f	namespace:sleep
sleep::now	sleep.h	/^	void now();$/;"	p	namespace:sleep
sleep::println	sleep.cpp	/^		Serial.println(messages[0]);$/;"	p	file:
sleep::println	sleep.cpp	/^		Serial.println(messages[1]);$/;"	p	file:
sleep::setup	letterbox.cpp	/^	sleep::setup();$/;"	p	class:sleep	file:
sleep::setup	sleep.cpp	/^	void setup()$/;"	f	namespace:sleep
sleep::setup	sleep.h	/^	void setup();$/;"	p	namespace:sleep
trapdoor	pins.h	/^	const uint8_t trapdoor = 4;$/;"	m	namespace:pin
wakeUp	sleep.cpp	/^static void wakeUp()$/;"	f	file:
